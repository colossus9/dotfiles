[user]
	name = 
	email = 
	
[github]
	user = 

[gpg]
	program = gpg

[include]
	# path = ~/.gitconfig-user

[color]
	# Colour terminal command output when possible.
	ui = auto

[gist]
	# Open GitHub Gist in browser after submission.
	browse = true

[push]
	# Push to the set upstream branch being tracked by default.
	default = simple

[fetch]
	# Always prune when fetching (and pulling).
	prune = 1

[rerere]
	# Store and re-use manual conflict resolution changes.
	enabled = 1

[core]
	# Exclude everything this file. Used for general exclusions.
	excludesfile = ~/.gitignore

	# Set attributes on files. Used for general diff improvements.
	attributesfile = ~/.gitattributes

	# Don't prompt for commit messages for merge commits.
	mergeoptions = --no-edit

[help]
	# Autocorrect mistyped commands.
	# autocorrect = 1

[alias]
	# List all aliases
	aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /' | sort

	# Common Commands
	cb = !git branch | grep ^* | cut -d' ' -f2
	branch-name = !git cb    # alias to "cb" alias
	st = status
	ci = commit
	cie = commit --allow-empty-message -m ''
	cp = cherry-pick
	br = branch
	co = checkout
	dad = !curl https://icanhazdadjoke.com/ && git add
	df = diff -C --color-words
	pl = !git pull --rebase origin $(git cb)
	ps = !git push origin $(git cb)
	lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --all
	who = shortlog -s --
	push-hash = !sh -c 'git push origin $1:refs/heads/$(git cb)' -    # requires a SHA or the remote branch will be deleted!!
	reset-tags = "!f() { git tag -l | xargs git tag -d; git fetch; }; f"
	cloner = clone --recursive
	save = stash save -u
	prune-local = !git branch --merged | grep -v master | grep -v dev | xargs -n 1 git branch -d
	prune-all = !git remote | xargs -n 1 git remote prune
	find = !sh -c 'git lg --grep="$@"'    # search for a string in the commit message log
	srch = !sh -c 'git grep "$@" $(git rev-list --all)'    # search for a string in all commits
	fixup = !sh -c 'git commit --fixup=$1' -
	squash = !sh -c 'git commit --squash=$1' -
	ri = rebase --interactive --autosquash --preserve-merges
	oldest-ancestor = !zsh -c 'diff --old-line-format='' --new-line-format='' <(git rev-list --first-parent "${1:-master}") <(git rev-list --first-parent "${2:-HEAD}") | head -1' -
	delete-tag = "!f() { git tag -d $1; git push origin :refs/tags/$1; }; f"
	info = !sh -c 'git-info' -    # requires https://github.com/gitbits/git-info
	submodule-list = !git ls-files --stage | grep 16000

	# Unstage the changes in a given file.
	unstage = reset HEAD --

	# View the current changes in the staging area.
	staged = diff --cached

	# Print the name of the current branch.
	current-branch = symbolic-ref --short HEAD

	# Print the name of the current upstream tracking branch.
	upstream = !git config --get branch.$(git current-branch).remote \
	         || echo origin

	# Cherry-pick a commit with your signature.
	sign = cherry-pick --signoff

	# List all current SVN externals for this repository.
	svn-externals = !git svn show-externals | grep -x \\"[^#].*\\"

	# Create a git:// server of the current repository.
	# WARNING: this gives all users read/write access
	# without authentication (so only use on trusted networks).
	serve = !git daemon --reuseaddr --export-all --base-path=. \
	                    --verbose ./.git

	# Merge a branch and commit a merge commit (even if one
	# isn't needed)
	noff = merge --no-ff

	# Merge a branch with a merge commit and resolve any conflicts
	# always using that branch's version rather than the current branch.
	theirs = !git noff -Xtheirs

	# Fetch all branches and rebase the current branch against
	# upstream/master.
	rebase-against-master = !git fetch --all \
	                      && git rebase $(git upstream)/master

	# Push the current branch upstream to origin using the same branch
	# name for the remote branch.
	upstream-current-branch = !git push --set-upstream origin \
	                         $(git current-branch)

	# Create a pull request on GitHub using the `hub` command.
	pull-request = !hub pull-request -o

	# Upstream the current branch to origin and create a pull request
	# on GitHub.
	upstream-and-pull-request = !git upstream-current-branch \
	                          && git pull-request

	# Get the current diff but show differences between characters
	# instead of just the differences between lines.
	word-diff = diff --word-diff

	# Push the current branch and set it as the default upstream branch.
	push-and-set-upstream = push --set-upstream

	# Create a new branch by checking out another branch.
	checkout-as-new-branch = checkout -b

	# Rebase against origin/master and prompt for what operations
	# should be performed.
	interactively-rebase-against-origin-master = \
	  !git rebase --interactive origin/master

	# Show the commit log with a prettier, clearer history.
	pretty-one-line-log = log --graph --oneline --decorate

	# Commit any changes to files, squash them into the last commit
	# and update its date.
	fix-up-previous-commit = !git commit --all --amend \
	                              --reuse-message=HEAD --date=\"$(date)\" #"

	# Checkout the master branch and update it.
	pull-master = !git checkout master && git pull

	# Commit a work-in-progress commit (to use with
	# fix-up-previous-commit)
	work-in-progress = commit -a -m 'WIP'

	# Merge a branch with a merge commit and use the more time-consuming
	# patience diff algorithm
	patience = !git noff -Xpatience

	# Hard reset branch to the upstream version.
	hard-reset = !git reset --hard $(git upstream)/$(git current-branch)

	# Assume the specified file is unchanged to stop changes
	# being seen by Git
	assume = update-index --assume-unchanged

	# No longer assume a specified file remains unchanged
	unassume = update-index --no-assume-unchanged

	# List all files that are assumed to be unchanged
	assumed = !git ls-files -v | grep '^[hsmrck?]' | cut -c 3-

	# Delete all non-master branches
	delete-merged = !git branch --merged | grep -v 'master' | grep -v '*' | xargs -n 1 git branch -D

	# Get the merge-base compared to origin/master
	merge-base-master = merge-base origin/master HEAD

	# Diff against the current branch's merge-base
	diff-merge-base = !git diff $(git merge-base-master)

[instaweb]
	# Use the Ruby WEBRick library when creating a `git instaweb`
	# HTTP server.
	httpd = webrick

[diff]
	# Use the OS X graphical three-way merge tool for graphical diffs.
	tool = opendiff

	# Use the slower but better patience diff algorithm
	algorithm = patience

	# Use new diff algorithm to make e.g. function diffs look better.
	compactionheuristic = true

[diff "xml"]
	textconv = xmllint --format --recover

[difftool "opendiff"]
	# Set the OS X opendiff command name.
	path = opendiff

[merge]
	# Use the OS X graphical three-way merge tool for graphical merges.
	tool = opendiff

[mergetool]
	# Don't prompt before opening the merge tool.
	prompt = false

	# Don't keep backups of the merge tool inputs.
	keepBackup = false

	# Don't keep the merge tool temporary input/output files.
	keepTemporaries = false

[mergetool "opendiff"]
	# Use a script to setup opendiff correctly for Git merges.
	path = git-mergetool-opendiff

[apply]
	# Cleanup whitespace by default when apply patches.
	whitespace = fix

[rebase]
	# Run `git stash` if needed before a `git rebase`
	autoStash = true

	# Auto-add `--autosquash` to `git rebase`
	autoSquash = true

[url "git@github.com:"]
	# Always use GitHub SSH protocol to push.
	# Allows use of git:// for public repositories with push access
	pushInsteadOf = git://github.com/

[url "https://github.com/"]
	# Use HTTP for GitHub instead of git:// or git@
	# Enable this in networks where git:// or git@ are blocked.
	#insteadOf = git://github.com/
	#insteadOf = git@github.com:

[url "git@github.com:"]
	# Use SSH for GitHub instead of https://
	# Enable this in networks where https:// has issues.
	#insteadOf = https://github.com/

[url "git@gitorious.org:"]
	# Always use Gitorious SSH protocol to push.
	# Allows use of git:// for public repositories with push access
	# (which is often faster).
	pushInsteadOf = git://gitorious.org/

[credential]
	# Use OS X Keychain to store HTTP passwords.
	helper = osxkeychain

[hub]
	protocol = https

[filter "lfs"]
	# Settings for Git LFS
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f

[commit]
	# Show the diff as a comment in the commit message template.
	verbose = true

# [http]
# 	sslVerify = false